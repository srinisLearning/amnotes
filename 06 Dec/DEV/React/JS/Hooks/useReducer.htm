<html><head><title>useReducer</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</head>
<body bgcolor="#ffffff" leftmargin=5 topmargin=5 rightmargin=5 bottommargin=5>
<font size=2 color="#000000" face="Arial">
<div><table width="100%" border=0 cellpadding=15 cellspacing=6 bordercolor="#000000" bgcolor="#ffffff">
<tr valign=top>
<td width=395><font size=2 color="#000000" face="Arial">
<div><font size=2 face="Verdana">import React, { useReducer } from 'react'

</font></div>
<div><font size=2 face="Verdana">&nbsp;</font></div>
<div><font size=2 face="Verdana">const initialState = 0
</font></div>
<div><font size=2 face="Verdana">const reducer = (state, action) =&gt; {
</font></div>
<div><font size=2 face="Verdana">switch (action) {
</font></div>
<div><font size=2 face="Verdana">case 'increment':
</font></div>
<div><font size=2 face="Verdana">return state + 1
</font></div>
<div><font size=2 face="Verdana">case 'decrement':
</font></div>
<div><font size=2 face="Verdana">return state - 1
</font></div>
<div><font size=2 face="Verdana">case 'reset':
</font></div>
<div><font size=2 face="Verdana">return initialState
</font></div>
<div><font size=2 face="Verdana">default:
</font></div>
<div><font size=2 face="Verdana">return state
</font></div>
<div><font size=2 face="Verdana">}
}</font></div>
<div><font size=2 face="Verdana">}

</font></div>
<div><font size=2 face="Verdana">&nbsp;</font></div>
<div><font size=2 face="Verdana">function CounterOne() {
</font></div>
<div><font size=2 face="Verdana">const [count, dispatch] = useReducer(reducer, initialState)

</font></div>
<div><font size=2 face="Verdana"><br></font></div>
<div><font size=2 face="Verdana">return (
 </font></div>
<div><font size=2 face="Verdana">&nbsp; &nbsp; &lt;div&gt;
 </font></div>
<div><font size=2 face="Verdana">&nbsp; &nbsp; &nbsp; &lt;div&gt;Count = {count}&lt;/div&gt;
 </font></div>
<div><font size=2 face="Verdana">&nbsp; &nbsp; &nbsp; &lt;button onClick={() =&gt; dispatch('increment')}&gt;Increment&lt;/button&gt;
</font></div>
<div><font size=2 face="Verdana">&nbsp; &nbsp; &nbsp; &lt;button onClick={() =&gt; dispatch('decrement')}&gt;Decrement&lt;/button&gt;
</font></div>
<div><font size=2 face="Verdana">&nbsp; &nbsp; &nbsp; &lt;button onClick={() =&gt; dispatch('reset')}&gt;Reset&lt;/button&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;/div&gt;
</font></div>
<div><font size=2 face="Verdana">)
}</font></div>
<div><font size=2 face="Verdana">}

</font></div>
<div><font size=2 face="Verdana">&nbsp;</font></div>
<div><font size=2 face="Verdana">export default CounterOne</font></div>
</font>
</td>
<td width=539><font size=2 color="#000000" face="Arial">
<div><font face="Courier New"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td width=395><font size=2 color="#000000" face="Arial">
<div><font size=2 face="Verdana">import React, { useReducer } from 'react'

</font></div>
<div><font size=2 face="Verdana">&nbsp;</font></div>
<div><font size=2 face="Verdana">const initialState = {
</font></div>
<div><font size=2 face="Verdana">firstCounter: 0,
</font></div>
<div><font size=2 face="Verdana">secondCounter: 10
}</font></div>
<div><font size=2 face="Verdana">} </font></div>
<div><font size=2 face="Verdana">const reducer = (state, action) =&gt; {
</font></div>
<div><font size=2 face="Verdana">switch (action.type) {
</font></div>
<div><font size=2 face="Verdana">case 'increment':
</font></div>
<div><font size=2 face="Verdana">return { ...state, firstCounter: state.firstCounter + action.value }
</font></div>
<div><font size=2 face="Verdana">case 'decrement':
</font></div>
<div><font size=2 face="Verdana">return { ...state, firstCounter: state.firstCounter - action.value }
</font></div>
<div><font size=2 face="Verdana">case 'increment2':
</font></div>
<div><font size=2 face="Verdana">return { ...state, secondCounter: state.secondCounter + action.value }
</font></div>
<div><font size=2 face="Verdana">case 'decrement2':
</font></div>
<div><font size=2 face="Verdana">return { ...state, secondCounter: state.secondCounter - action.value }
</font></div>
<div><font size=2 face="Verdana">case 'reset':
</font></div>
<div><font size=2 face="Verdana">return initialState
</font></div>
<div><font size=2 face="Verdana">default:
</font></div>
<div><font size=2 face="Verdana">return state
</font></div>
<div><font size=2 face="Verdana">}
}</font></div>
<div><font size=2 face="Verdana">}

</font></div>
<div><font size=2 face="Verdana">&nbsp;</font></div>
<div><font size=2 face="Verdana">function CounterTwo() {
</font></div>
<div><font size=2 face="Verdana">const [count, dispatch] = useReducer(reducer, initialState)

</font></div>
<div><font size=2 face="Verdana"><br></font></div>
<div><font size=2 face="Verdana">return (
</font></div>
<div><font size=2 face="Verdana">&lt;div&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;div&gt;Count = {count.firstCounter}&lt;/div&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;button onClick={() =&gt; dispatch({ type: 'increment', value: 1 })}&gt;
</font></div>
<div><font size=2 face="Verdana">Increment
</font></div>
<div><font size=2 face="Verdana">&lt;/button&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;button onClick={() =&gt; dispatch({ type: 'decrement', value: 1 })}&gt;
</font></div>
<div><font size=2 face="Verdana">Decrement
</font></div>
<div><font size=2 face="Verdana">&lt;/button&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;button onClick={() =&gt; dispatch({ type: 'increment', value: 5 })}&gt;
</font></div>
<div><font size=2 face="Verdana">Increment 5
</font></div>
<div><font size=2 face="Verdana">&lt;/button&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;button onClick={() =&gt; dispatch({ type: 'decrement', value: 5 })}&gt;
</font></div>
<div><font size=2 face="Verdana">Decrement 5
</font></div>
<div><font size=2 face="Verdana">&lt;/button&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;button onClick={() =&gt; dispatch({ type: 'reset' })}&gt;Reset&lt;/button&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;div&gt;Secound Counter = {count.secondCounter}&lt;/div&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;div&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;button onClick={() =&gt; dispatch({ type: 'increment2', value: 1 })}&gt;
</font></div>
<div><font size=2 face="Verdana">Increment
</font></div>
<div><font size=2 face="Verdana">&lt;/button&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;button onClick={() =&gt; dispatch({ type: 'decrement2', value: 1 })}&gt;
</font></div>
<div><font size=2 face="Verdana">Decrement
</font></div>
<div><font size=2 face="Verdana">&lt;/button&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;/div&gt;
</font></div>
<div><font size=2 face="Verdana">&lt;/div&gt;
</font></div>
<div><font size=2 face="Verdana">)
}</font></div>
<div><font size=2 face="Verdana">}

</font></div>
<div><font size=2 face="Verdana">&nbsp;</font></div>
<div><font size=2 face="Verdana">export default CounterTwo</font></div>
</font>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><font size=2 color="#000000" face="Arial">
<div><font face="Verdana">import React, {useState, useEffect} from 'react'
i</font></div>
<div><font face="Verdana">import axios from 'axios';

</font></div>
<div><font face="Verdana">&nbsp;</font></div>
<div><font face="Verdana">function DataFetchingOne() {
 </font></div>
<div><font face="Verdana">&nbsp; const [loading, setLoading] = useState(true)
 </font></div>
<div><font face="Verdana">&nbsp; const [error, setError] = useState('')
 </font></div>
<div><font face="Verdana">&nbsp; const [post, setPost] = useState({})

</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana">&nbsp; useEffect(() =&gt; {
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; axios.get(`https://jsonplaceholder.typicode.com/posts/1`)
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &nbsp; .then(response =&gt; {
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &nbsp; &nbsp; setLoading(false)
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &nbsp; &nbsp; setPost(response.data)
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &nbsp; &nbsp; setError('')
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &nbsp; })
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &nbsp; .catch(error =&gt; {
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &nbsp; &nbsp; setLoading(false)
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &nbsp; &nbsp; setPost({})
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &nbsp; &nbsp; setError('Something went wrong!')
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &nbsp; })
 </font></div>
<div><font face="Verdana">&nbsp; }, [])

</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana">&nbsp; return (
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &lt;div&gt;
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &nbsp; {loading ? 'Loading' : post.title}
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &nbsp; {error ? error : null}
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; &lt;/div&gt;
 </font></div>
<div><font face="Verdana">&nbsp; )
}</font></div>
<div><font face="Verdana">}

</font></div>
<div><font face="Verdana">&nbsp;</font></div>
<div><font face="Verdana">export default DataFetchingOne</font></div>
</font>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><font size=2 color="#000000" face="Arial">
<div><font face="Verdana">import React, { useReducer, useEffect } from 'react'
i</font></div>
<div><font face="Verdana">import axios from 'axios'
</font></div>
<div><font face="Verdana">&nbsp;</font></div>
<div><font face="Verdana">const initialState = {
</font></div>
<div><font face="Verdana">loading: true,
</font></div>
<div><font face="Verdana">error: '',
</font></div>
<div><font face="Verdana">post: {}
}</font></div>
<div><font face="Verdana">}

</font></div>
<div><font face="Verdana">&nbsp;</font></div>
<div><font face="Verdana">const reducer = (state, action) =&gt; {
</font></div>
<div><font face="Verdana">switch (action.type) {
</font></div>
<div><font face="Verdana">case 'FETCH_SUCCESS':
</font></div>
<div><font face="Verdana">return {
</font></div>
<div><font face="Verdana">loading: false,
</font></div>
<div><font face="Verdana">post: action.payload,
</font></div>
<div><font face="Verdana">error: ''
</font></div>
<div><font face="Verdana">}
</font></div>
<div><font face="Verdana">case 'FETCH_ERROR':
</font></div>
<div><font face="Verdana">return {
</font></div>
<div><font face="Verdana">loading: false,
</font></div>
<div><font face="Verdana">post: {},
</font></div>
<div><font face="Verdana">error: 'Something went wrong!'
</font></div>
<div><font face="Verdana">}
</font></div>
<div><font face="Verdana">default:
</font></div>
<div><font face="Verdana">return state
</font></div>
<div><font face="Verdana">}
}</font></div>
<div><font face="Verdana">}

</font></div>
<div><font face="Verdana">&nbsp;</font></div>
<div><font face="Verdana">function DataFetchingTwo() {
</font></div>
<div><font face="Verdana">const [state, dispatch] = useReducer(reducer, initialState)

</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana">useEffect(() =&gt; {
</font></div>
<div><font face="Verdana">axios
</font></div>
<div><font face="Verdana">.get(`https://jsonplaceholder.typicode.com/posts/1`)
</font></div>
<div><font face="Verdana">.then(response =&gt; {
</font></div>
<div><font face="Verdana">dispatch({ type: 'FETCH_SUCCESS', payload: response.data })
</font></div>
<div><font face="Verdana">})
</font></div>
<div><font face="Verdana">.catch(error =&gt; {
</font></div>
<div><font face="Verdana">dispatch({ type: 'FETCH_ERROR' })
</font></div>
<div><font face="Verdana">})
</font></div>
<div><font face="Verdana">}, [])
</font></div>
<div><font face="Verdana">return (
</font></div>
<div><font face="Verdana">&lt;div&gt;
</font></div>
<div><font face="Verdana">{state.loading ? 'Loading' : state.post.title}
</font></div>
<div><font face="Verdana">{state.error ? state.error : null}
</font></div>
<div><font face="Verdana">&lt;/div&gt;
</font></div>
<div><font face="Verdana">)
}</font></div>
<div><font face="Verdana">}

</font></div>
<div><font face="Verdana">&nbsp;</font></div>
<div><font face="Verdana">export default DataFetchingTwo</font></div>
</font>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><br>
</td>
<td width=539><br>
</td>
</tr>
<tr valign=top>
<td width=395><font size=2 color="#000000" face="Arial">
<h4><font size=2 color="#000000" face="Arial"><font size=4 color="#808080" face="Verdana">JavaScript Demo: Array.reduce()</font></font></h4>
<h4><font size=2 color="#000000" face="Arial"><font size=4 color="#808080" face="Verdana"><br></font></font></h4>
<h4><font size=2 color="#000000" face="Arial"><font size=3 color="#969696" face="Verdana">array.reduce(reducer,initialValue)</font></font></h4>
<h4><font size=2 color="#000000" face="Arial"><font size=3 color="#969696" face="Verdana"><br></font></font></h4>
<div><font face="Verdana">const array1 = [1, 6, 3, 4];</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana">// 0 + 1 + 2 + 3 + 4</font></div>
<div><font face="Verdana">const initialValue = 10;</font></div>
<div><font face="Verdana">const sumWithInitial = array1.reduce((accumulator, currentValue) =&gt; accumulator + currentValue, initialValue);</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana">console.log(sumWithInitial);</font></div>
<div><font face="Verdana">// Expected output: 10</font></div>
<div><font face="Verdana"><br></font></div>
<div><font size=3 face="Verdana"><b>useReducer(reducer,initialState)</b></font></div>
</font>
</td>
<td width=539><font size=2 color="#000000" face="Arial">
<div><font face="Verdana">useReducer(reducer, initialState)</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana">const initialState = 0</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana">const reducer = (state,reducer) =&gt; {</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana">&nbsp; return newState </font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana">}</font></div>
</font>
</td>
</tr>
</table>
</div>
</font>
</body></html>
