export async function GET(){
    return  new Response('Hello World')
}

export async function GET(){
    return Response.json(products)
}


export async function POST(request){
    const product  = await request.json()
    const newProduct = {
        id: products.length + 1,
        name: product.name,
        category: product.category,
        price: product.price,
        stock: product.stock
    }
    products.push(newProduct)
        
    return new Response(JSON.stringify(newProduct), {
        headers: { "Content-Type": "application/json" },
        status: 201,
      });

}
export async function GET(_request, { params }) {
 
  const product = products.find(
    (product) => product.id === parseInt(params.productId)
  );
  return Response.json(product);
}
  
export async function DELETE( _request,{ params })
 {
  const index = products.findIndex(
    (product) => product.id === parseInt(params.productId)
  );
  const deletedProduct = products[index];
  products.splice(index, 1);
  return Response.json(deletedProduct);
}
export async function GET(request){
    const searchParms = request.nextUrl.searchParams
    console.log(searchParms)
    const query = searchParms.get("query")
    const filteredProducts = query
    ? products.filter((product) => product.name.includes(query) ): products;
    return Response.json(filteredProducts)

}
 <Image
              src="/vercel.svg"
              alt="Vercel Logo"
              className="dark:invert"
              width={100}
              height={24}
              priority
            />


api/comments/index.js 

import { comments } from '@/data/comments'


 
export default function handler(req, res) {
 
  if (req.method === 'GET') {
 
    res.status(200).json(comments)
 
  } else if (req.method === 'POST') {
 
    const comment = req.body.comment
 
    const newComment = {
 
      id: Date.now(),
 
      text: comment
 
    }
 
    comments.push(newComment)
 
    res.status(201).json(newComment)
 
  }
}
}
-

api/comments/commentId

import { comments } from 'text text @/data/comments'




export default function handler(req, res) {
 
  const { commentId } = req.query
 
  if (req.method === 'GET') {
 
    const comment = comments.find(comment => comment.id === parseInt(commentId))
 
    res.status(200).json(comment)
 
  } else if (req.method === 'DELETE') {
 
    const deletedComment = comments.find(
 
      comment => comment.id === parseInt(commentId)
 
    )
 
    const index = comments.findIndex(
 
      comment => comment.id === parseInt(commentId)
 
    )
 
    comments.splice(index, 1)
 
    res.status(200).json(deletedComment)
 
  }
}
}

-

api/[...params].js

export default function handler(req, res) {
 const params = req.query.params
 console.log(params)
 res.status(200).json(params)
 }


comments/index.js

import { useState } from 'react'
 function CommentsPage() {
 const [comments, setComments] = useState([])
 const [comment, setComment] = useState('')

 const fetchComments = async () => {
 const response = await fetch('/api/comments')
 const data = await response.json()
 setComments(data)
 }

 const submitComment = async () => {
 const response = await fetch('/api/comments', {
 method: 'POST',
 body: JSON.stringify({ comment }),
 headers: {
 'Content-Type': 'application/json'
 }
 })
 const data = await response.json()
 console.log(data)
 }

 const deleteComment = async commentId => {
 const response = await fetch(`/api/comments/${commentId}`, {
 method: 'DELETE'
 })
 const data = await response.json()
 console.log(data)
 fetchComments()
 }
 return (
 <>
 <div>
 <input
 type='text'
 value={comment}
 onChange={e => setComment(e.target.value)}
 />
 <button onClick={submitComment}>Submit comment</button>
 </div>
 <hr />
 <button onClick={fetchComments}>Load comments</button>
 {comments.map(comment => {
 return (
 <div key={comment.id}>
 {comment.id}. {comment.text}
 <button onClick={() => deleteComment(comment.id)}>Delete</button>
 </div>
 )
 })}
 </>
 )
 }

 export default CommentsPage

-

comments[commentId].js


import { comments } from '../../data/comments'


 
function Comment({ comment }) {
 
  return (
 
    <div>
 
      {comment.id}. {comment.text}
 
    </div>
 
  )
}
}



e
export default Comment



e
export async function getStaticProps(context) {
 
  const { params } = context
 
  const { commentId } = params



  const comment = comments.find(comment => comment.id === parseInt(commentId))
 
  console.log(comment)



  /** Don't do this 
 
  const response = await fetch(`http:localhost:3000/api/comments/${commentId}`)
 
  const data = await response.json()
 
  */



  return {
 
    props: {
 
      comment
 
    }
 
  }
}
}



e
export async function getStaticPaths() {
 
  return {
 
    paths: [
 
      { params: { commentId: '1' } },
 
      { params: { commentId: '2' } },
 
      { params: { commentId: '3' } }
 
    ],
 
    fallback: false
 
  }
}
}





































