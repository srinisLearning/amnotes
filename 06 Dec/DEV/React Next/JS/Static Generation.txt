STATIC GENERATION
* Static Generation is a method of pre-rendering where the HTML pages are generated at build time
* The pre rendered static pages can be pushed into a CDN,cached,and served to clients across the globe almost instantly
* Static content is fast and better for SEO as they are immediately indexed by search engines
* With and without external data
* Export getStaticProps function for external data
* HTML,JavaScript and a JSON file are generated
* If you navigate directly to the page route, the HTML file is served
* If you navigate to the page route from a different route,the page is created on the client side using the Java Script and JSON prefetched from the server

index.js

import styles from "./index.module.css";
import Link from "next/link";

export const getStaticProps = async () => {
  const response = await fetch("https://jsonplaceholder.typicode.com/users");
  const data = await response.json();
  return {
    props: {
      users: data,
    },
  };
};

const UserList = ({ users }) => {
  return (
    <>
      <h3>User List</h3>

      {users.map((user) => {
        return (
          <Link
            key={user.id}
            href={"/wasan/" + user.id}
            className={styles.single}
          >
            {user.name}
          </Link>
        );
      })}
    </>
  );
};

export default UserList;
[userId].js

export const getStaticPaths = async ()  => {
    const response = await fetch('https://jsonplaceholder.typicode.com/users')
    const data = await response.json()
    const paths = data.map(currElem => {
        return {
            params: {userId:currElem.id.toString()}
        }
    })
    return {
        paths,
        fallback:false

        }
    }



    
    export const getStaticProps = async (context) => {
         const userId = context.params.userId;
         const res = await fetch('https://jsonplaceholder.typicode.com/users/' + userId)
         const data = await res.json();
         return {
            props :
              {
                 users :data
                }
         }
    }




const UserDetail = ({users}) => {
  return (
    <>
      <h3>Detail Page</h3>
      {
        <div>
        <p>{users.name }</p>
        <p>{users.email }</p>
        <p>{users.website }</p>
        <p>{users.address.city }</p>
        <p>{users.address.zipcode }</p>
         
        </div>
      }
    </>
  );
};

export default UserDetail;

Post List

import Link from "next/link";

export const getStaticProps = async () => {
  const response = await fetch("https://jsonplaceholder.typicode.com/posts");
  const data = await response.json();
  return {
    props: {
      posts: data,
    },
  };
};

const PostList = ({ posts }) => {
  return (
    <>
      <h3>Post List</h3>
      {posts.slice(0, 5).map((post) => {
        return (
          <div key={post.id}>
            <span>
              <Link href={`/thapapost/${post.id}`}>
                <p>{post.title}</p>
              </Link>
            </span>
          </div>
        );
      })}
    </>
  );
};

export default PostList;

Post Detail

export const getStaticPaths = async () => {
  const response = await fetch("https://jsonplaceholder.typicode.com/posts");
  const data = await response.json();
  const paths = data.map((currElem) => {
    return {
      params: {
        postId: currElem.id.toString(),
      },
    };
  });
  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps = async (context) => {
  const id = context.params.postId;
  const response = await fetch(
    `https://jsonplaceholder.typicode.com/posts/${id}`
  );
  const data = await response.json();
  return {
    props: {
      post: data,
    },
  };
};

const PostDetail = ({ post }) => {
  const { id, title, body } = post;
  return (
    <div>
      <h2>Post Detail</h2>
      <h5>{id}</h5>
      <h5>{title}</h5>
      <h5>{body}</h5>
    </div>
  );
};

export default PostDetail;

Code Evolution Vishwas

import Link from 'next/link'


 
function PostList({ posts }) {
 
  return (
 
    <>
 
      <h1>List of Posts</h1>
 
      {posts.map(post => {
 
        return (
 
          <div key={post.id}>
 
            <Link href={`posts/${post.id}`}>
 
              <h2>
 
                {post.id} {post.title}
 
              </h2>
 
            </Link>
 
            <hr />
 
          </div>
 
        )
 
      })}
 
    </>
 
  )
}
}


 
export default PostList


 
export async function getStaticProps() {
 
  const response = await fetch('https://jsonplaceholder.typicode.com/posts')
 
  const data = await response.json()



  return {
 
    props: {
 
      posts: data.slice(0, 3)
 
    }
 
  }
}
}
 
-



import { useRouter } from 'next/router'


 
function Post({ post }) {
 
  const router = useRouter()



  if (router.isFallback) {
 
    return <div>Loading...</div>
 
  }



  return (
 
    <>
 
      <h2>
 
        {post.id} {post.title}
 
      </h2>
 
      <p>{post.body}</p>
 
    </>
 
  )
}
}


 
export default Post


 
export async function getStaticProps(context) {
 
  const { params } = context
 
  const response = await fetch(
 
    `https://jsonplaceholder.typicode.com/posts/${params.postId}`
 
  )
 
  const data = await response.json()



  if (!data.id) {
 
    return {
 
      notFound: true
 
    }
 
  }



  console.log(`Generating page for /posts/${params.postId}`)
 
  return {
 
    props: {
 
      post: data
 
    }
 
  }
}
}



e
export async function getStaticPaths() {
 
  // const response = await fetch('https://jsonplaceholder.typicode.com/posts')
 
  // const data = await response.json()
 
  // const paths = data.map(post => {
 
  //   return {
 
  //     params: { postId: `${post.id}` }
 
  //   }
 
  // })



  return {
 
    paths: [
 
      { params: { postId: '1' } },
 
      { params: { postId: '2' } },
 
      { params: { postId: '3' } }
 
    ],
 
    fallback: true
 
  }
}
}
function User({ user }) {
 return (
 <>
 <p>{user.name}</p>
 <p>{user.email}</p>
 <hr />
 </>
 )
 }

 export default User
import User from '../components/user'

 function UserList({ users }) {
 return (
 <>
 <h1>List of users</h1>
 {users.map(user => {
 return (
 <div key={user.id}>
 <User user={user} />
 </div>
 )
 })}
 </>
 )
 }

 export default UserList

 export async function getStaticProps() {
 const response = await fetch('https://jsonplaceholder.typicode.com/users')
 const data = await response.json()
 // console.log(data)

 return {
 props: {
 users: data
 }
 }
 }

































