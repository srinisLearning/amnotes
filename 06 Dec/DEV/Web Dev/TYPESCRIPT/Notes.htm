<html><head><title>Notes</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</head>
<body bgcolor="#ffffff" leftmargin=5 topmargin=5 rightmargin=5 bottommargin=5>
<font size=2 color="#000000" face="Arial">
<div><table width="100%" border=0 cellpadding=16 cellspacing=6 bordercolor="#000000" bgcolor="#ffffff">
<tr valign=top>
<td width=501><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><b>Promise in Java Script</b></font></div>
<div><font color="#000000" face="Verdana"><br></font></div>
<div><font face="Verdana">In JavaScript, a Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. Promises were introduced to handle asynchronous operations in a more organized and straightforward manner, making it easier to write and reason about asynchronous code.</font></div>
<div><font face="Verdana">Let's break it down step by step:</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana">Asynchronous Operations: In JavaScript, some tasks take time to complete, like fetching data from a server, reading a file, or waiting for a user input. During this time, the program continues to execute other tasks without waiting for the asynchronous operation to finish. As a result, the order of execution may not be sequential, and handling the result of asynchronous operations can be challenging.</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana">What Promises Solve: Promises provide a way to manage asynchronous operations and their results in a more structured manner. They ensure that code execution waits for the completion of an asynchronous task before proceeding further.</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana"><b>Promise States:</b></font><font face="Verdana">&nbsp;A Promise can be in one of three states:</font></div>
<ol><ul type="circle">
<li><font face="Verdana">Pending: The initial state. The asynchronous operation is still ongoing, and the Promise has not been fulfilled or rejected yet.</font></li>
<li><font face="Verdana">Fulfilled: The asynchronous operation completed successfully, and the Promise has a resulting value.</font></li>
<li><font face="Verdana">Rejected: The asynchronous operation encountered an error, and the Promise has a reason for the failure.</font></li>
</ul></ol>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana"><b>Creating a Promise</b></font><font face="Verdana">: You can create a Promise using the Promise constructor, which takes a function as an argument. This function, known as the "executor," has two parameters: resolve and reject. Inside the executor, you perform your asynchronous operation, and when it's done, you call either resolve(value) if it's successful or reject(reason) if it fails.</font></div>
<div><font face="Verdana">&nbsp; </font></div>
<div><font face="Verdana">const myPromise = new Promise((resolve, reject) =&gt; {
 </font></div>
<div><font face="Verdana">&nbsp; // Perform some asynchronous operation here</font></div>
<div><font face="Verdana">&nbsp; // If successful, call resolve with the resulting value</font></div>
<div><font face="Verdana">&nbsp; // If there's an error, call reject with the reason
}</font></div>
<div><font face="Verdana">});
</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana"><b>Handling Promise Results:</b></font><font face="Verdana">&nbsp;To handle the result of a Promise, you use the .then() method. It allows you to define a callback function that will be executed when the Promise is fulfilled (i.e., successful).</font></div>
<div><font face="Verdana">Example:</font></div>
<div><font face="Verdana">javascriptCopy code</font></div>
<div><font face="Verdana">myPromise.then((result) =&gt; {
 </font></div>
<div><font face="Verdana">&nbsp; console.log("Promise fulfilled with result:", result);
}</font></div>
<div><font face="Verdana">});
</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana"><b>Handling Promise Errors</b></font><font face="Verdana">: To handle errors in a Promise, you use the .catch() method. It allows you to define a callback function that will be executed when the Promise is rejected (i.e., an error occurred).</font></div>
<div><font face="Verdana">Example:</font></div>
<div><font face="Verdana">&nbsp;</font></div>
<div><font face="Verdana">myPromise.catch((error) =&gt; {
 </font></div>
<div><font face="Verdana">&nbsp; console.error("Promise rejected with error:", error);
}</font></div>
<div><font face="Verdana">});
</font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana"><br></font></div>
<div><font face="Verdana"><b>Chaining Promises: </b></font><font face="Verdana">Promises can be chained together using multiple .then() calls. This allows you to sequence asynchronous operations or transform the result of a Promise and pass it to the next then() callback.</font></div>
<div><font face="Verdana">Example:</font></div>
<div><font face="Verdana">&nbsp;</font></div>
<div><font face="Verdana">myPromise
 </font></div>
<div><font face="Verdana">&nbsp; .then((result) =&gt; {
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; // Do something with the result</font></div>
<div><font face="Verdana">&nbsp; &nbsp; return transformedResult;
 </font></div>
<div><font face="Verdana">&nbsp; })
 </font></div>
<div><font face="Verdana">&nbsp; .then((transformedResult) =&gt; {
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; // Do something with the transformed result</font></div>
<div><font face="Verdana">&nbsp; })
 </font></div>
<div><font face="Verdana">&nbsp; .catch((error) =&gt; {
 </font></div>
<div><font face="Verdana">&nbsp; &nbsp; console.error("Something went wrong:", error);
 </font></div>
<div><font face="Verdana">&nbsp; });</font></div>
</font>
</td>
<td width=564><font size=2 color="#000000" face="Arial">
<div><a href="https://www.bing.com/search?pglt=41&amp;q=typescript%2Bassessment&amp;cvid=a2e389ec75b84b07b2db8dfa6dbd611a&amp;aqs=edge..69i57j0l4j69i64.11535j0j1&amp;FORM=ANAB01&amp;PC=EDGEDB&ntref=1"><font color="#0000ff"><u>&nbsp;</u></font></a><font size=5><b>&nbsp;</b></font>How to convert a string to a number in TypeScript?</div>
<div align=center><img width=378 height=104 alt="TS_Int_Qs_stringtono.." src="Notes1.png"></div>
<div align=center><font color="#0000ff"><u><br></u></font></div>
<div align=center><br></div>
<hr noshade size=1 color="#000000">
<h3><font size=2 color="#000000" face="Arial"><font size=3><b>Describe ‘as’ syntax in TypeScript.</b></font></font></h3>
<div>In TypeScript, the 'as' syntax is used for Type assertion. It was created because the original syntax was incompatible with JSX. Only as-style assertions can be used with JSX and TypeScript.</div>
<div>Example:</div>
<div>let stdid: any=007</div>
<div>let stdid= id as number;</div>
<div><br></div>
<hr noshade size=1 color="#000000">
<div><br></div>
<h3><font size=2 color="#000000" face="Arial"><font size=3><b>How to create objects in Typescript?</b></font></font></h3>
<div>Objects are collections of keys and values that resemble a dictionary. The keys must be one-of-a-kind. They resemble arrays and are sometimes referred to as associative arrays. An array, on the other hand, employs numbers to index the values, whereas an object lets you use any type as the key.</div>
<div>An Object type in TypeScript refers to any value with properties. It can be defined simply by specifying the properties and the kinds of those properties. As an example,</div>
<div>let pt: { x: number; y: number } = {</div>
<div>&nbsp;&nbsp;x: 10,</div>
<div>&nbsp;&nbsp;y: 20</div>
<div>};</div>
<hr noshade size=1 color="#000000">
<h3><font size=2 color="#000000" face="Arial"><font size=3><b>Define Lambda function.</b></font></font></h3>
<div>For defining function expressions, TypeScript provides a shortcut syntax. A lambda function is an unnamed anonymous function.&nbsp;</div>
<div>Example:</div>
<div>let sum=(a: num, b: num): num=&gt;{ return a+b;}</div>
<div>console.log(sum(5,10)); //returns 15</div>
<div>Here, ?=&gt;? is a lambda operator.</div>
<hr noshade size=1 color="#000000">
<h3><font size=2 color="#000000" face="Arial"><font size=3><b>Explain Tuples in Typescript With Example</b></font></font></h3>
<div>Tuples are a collection of values that are diverse. It allows for the storage of many fields of various sorts. Tuples can also be used as function parameters.</div>
<div>There are instances when it is necessary to save a collection of values of various types. Arrays will not suffice in this situation. TypeScript provides a data type called tuple that aids in this endeavor.</div>
<div>Syntax:</div>
<div>var tuple_name = [value c,value b,value c,…value n]</div>
<div>For Example:</div>
<div>var yourtuple = [12,"Hi"];</div>
</font>
</td>
</tr>
<tr valign=top>
<td width=501><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
<td width=564><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana">Mission Accomplished Thank You</font></div>
</font>
</td>
</tr>
<tr valign=top>
<td width=501><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
<td width=564><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td width=501><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
<td width=564><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td width=501><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
<td width=564><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td width=501><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
<td width=564><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td width=501><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
<td width=564><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td width=501><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
<td width=564><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td width=501><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
<td width=564><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td width=501><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
<td width=564><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Verdana"><br></font></div>
</font>
</td>
</tr>
</table>
</div>
</font>
</body></html>
