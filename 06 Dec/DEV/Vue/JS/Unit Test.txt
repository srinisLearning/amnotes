 <template>
  <h3>Metro Foods</h3>
  <div class="row">
    <div class="col-md-8">
      <h3>{{ projectTitle }}</h3>
    </div>
    <div class="col-md-4">
      <img :src="require(`../../src/assets/${logo_url}`)" class="logoStyle" />
    </div>
  </div>
</template>

<script>
export default {
  name: "Header",
  props: {
    projectTitle: String,
    logo_url: String,
  },
};
</script>

<style>
.logoStyle {
  width: 100px;
  height: 100px;
}
</style>

import { shallowMount } from "@vue/test-utils";
import Header from "@/components/Header.vue";

describe("Header.vue", () => {
  it("renders project title and logo", () => {
    const projectTitle = "Metro Foods";
    const logoUrl = "logo.png";
    const wrapper = shallowMount(Header, {
      propsData: { projectTitle, logo_url: logoUrl },
    });

    expect(wrapper.find("h3").text()).toBe("Metro Foods");
    expect(wrapper.find(".col-md-8 h3").text()).toBe(projectTitle);
    expect(wrapper.find(".col-md-4 img").attributes("src")).toBe(
      require(`../../src/assets/${logoUrl}`)
    );
  });
});
 <template>
<hr />
<div v-html="footerText" class="text-center">
    </div>
    <p class="text-center">{{ footerText2 }}</p>
</template>

<script>
export default {
     name: "Footer", 
     data() 
     {
         return {
            footerText: " <b> &#169 2023 <i>Wasan Services<i></b>",
            footerText2: "All Rights Reserved",};
            },
};
</script>

<style></style>
 
import { mount } from '@vue/test-utils';
import Footer from '@/components/Footer.vue';

describe('Footer', () => {
  test('renders footer text', () => {
    const wrapper = mount(Footer);
    expect(wrapper.find('div').text()).toContain('© 2023 Wasan Services');
  });

  test('renders footer text2', () => {
    const wrapper = mount(Footer);
    expect(wrapper.find('p').text()).toContain('All Rights Reserved');
  });
});

 

/*
import { mount } from '@vue/test-utils';
import SignUp from '@/components/SignUp.vue';

describe('SignUp', () => {
  it('submits the form data if all fields are valid', () => {
    const wrapper = mount(SignUp);

    // fill in valid form data
    wrapper.find('#name').setValue('John Doe');
    wrapper.find('#email').setValue('johndoe@example.com');
    wrapper.find('#mobile').setValue('1234567890');
    wrapper.find('#password').setValue('password123');
    wrapper.find('#confirm-password').setValue('password123');

    // submit the form
    wrapper.find('form').trigger('submit.prevent');

    // check that form data was logged to console
    expect(console.log).toHaveBeenCalledWith({
      name: 'John Doe',
      email: 'johndoe@example.com',
      mobile: '1234567890',
      password: 'password123',
      confirmPassword: 'password123',
    });
  });

  it('displays validation errors if form fields are invalid', async () => {
    const wrapper = mount(SignUp);

    // fill in invalid form data
    wrapper.find('#name').setValue('');
    wrapper.find('#email').setValue('invalidemail');
    wrapper.find('#mobile').setValue('123');
    wrapper.find('#password').setValue('password');
    wrapper.find('#confirm-password').setValue('differentpassword');

    // submit the form
    wrapper.find('form').trigger('submit.prevent');

    // check that validation errors are displayed
    await wrapper.vm.$nextTick();
    expect(wrapper.find('.error').exists()).toBe(true);
    expect(wrapper.find('.error').text()).toContain('Name is required.');
    expect(wrapper.findAll('.error').at(1).text()).toContain('Please enter a valid email address.');
    expect(wrapper.findAll('.error').at(2).text()).toContain('Please enter a valid mobile number.');
    expect(wrapper.find('.error').text()).toContain('Password must be at least 8 characters.');
    expect(wrapper.findAll('.error').at(4).text()).toContain('Passwords do not match.');
  });
});


































