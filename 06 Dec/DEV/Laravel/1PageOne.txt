onClick = ‘return confirm(‘Are you sure ???)’

https://stackoverflow.com/questions/65218631/laravel-app-stopped-working-after-upgrading-to-php-8
https://www.tutsmake.com/laravel-8-fetch-data-using-ajax-tutorial-example/

return response()->json([‘products’ =>$products])

 
use App\Http\Controllers\api\DeviceAPIController;
Route::resource('/device',DeviceAPIController::class);
public function index()
    {
        $device = Device::get();
        return response()->json(["device"=>$device]);
    }
public function create()
    {
        
        if($request->isMethod('post')){
            $userData = $request->input();
            $user = new User();
            $user->name = $userData['name'];
            $user->email =$userData['email'];
            $user->save();
            return response()->json('message'=>'User added successfully')
        }
    }


public function getUsers($id=null){
        if(empty->$id){
            $users = User::get();
            return response()->json['users'=>$users];
        }else{
            $users = User::find($id);
            return response()->json['users'=>$users];
        }
    }





Projects - > Doctor,Home,Restaurant,Shopping,Pizza

<script src="{{ asset('js/app.js') }}" defer></script>

   <link href="{{ asset('css/app.css') }}" rel="stylesheet">

https://laravel.com/docs/8.x/blade

https://laravel.com/docs/8.x/routing

https://laravel.com/docs/8.x/views

https://laravel.com/docs/5.3/queries#where-clauses


protected $namespace = 'App\Http\Controllers';


https://www.parthpatel.net/laravel-8-bootstrap-auth-scaffolding/

https://github.com/nascent-africa/jetstrap

<script src="https://kit.fontawesome.com/e1f64f0d18.js" crossorigin="anonymous"></script>


public function index(Request $request)
    {
        // $list_user = User::all();
        if($request->ajax()){
            $user = User::latest()->get();
            return datatables()->of($user)
                    ->addIndexColumn()
                    ->addColumn('action', function (User $user){
                        $actionBtn = '<a href="'.route('user.edit',$user->id).'" title="Edit User" class="btn btn-sm" style="color: #fff;background-color: #3DCB3A;border-color: #8ad3d3"> <i class="fa fa-edit"></i> </a> 
                        <a href="'.route('user.destroy',$user->id).'" class="btn btn-danger btn-sm" title="Hapus User" ><i class="fa fa-trash "></i></a>';
                        return $actionBtn;
                    })
                    ->rawColumns(['action'])
                    ->make(true);
            }
        return view('dashboard.user.user');
        // return response()->json($list_user);
    }
}




 public function store(Request $request)
    {
       dd($request->all());
    }

action=”{{route(‘pizza.create’}}” method=’POST”

php artisan storage:link
Php artisan make:migration add_phone_to_users
php artisan db:seed
<link href="{{ asset('css/app.css') }}" rel="stylesheet">


Dumps
Artisan
Auth
Blade
Cheat Sheet
Controllers
Database
Eloquent
Guard
Links
Migration
Model
Middleware
Routes
Seeders
Session
Templates
Validation
Project : PGService

if ($mentor->first()) { } 
if (!$mentor->isEmpty()) { }
 if ($mentor->count()) { }
 if (count($mentor)) { }
 if ($mentor->isNotEmpty()) { }




install composer (get Composer.org)
composer
composer global require laravel/installer
laravel --version

composer create-project --prefer-dist laravel/laravel <projectname>   
composer create-project laravel/laravel Hospital

composer require laravel/ui: ^3.0  

composer require laravel/ui
php artisan ui vue --auth  
php artisan ui bootstrap --auth
npm install
npm run dev
Create table
 Env file database and usertype
php artisan migrate





composer create-project --prefer-dist laravel/laravel <projectname>   

composer require laravel/ui
composer artisan ui bootstrap —auth



composer require laravel/jetstream
php artisan jetstream:install livewire

composer require laravel/breeze  —dev
php artisan breeze:install




composer require livewire/livewire

https://github.com/nascent-africa/jetstrap

composer require nascent-africa/jetstrap --dev
php artisan jetstrap:swap livewire

npm install && npm run dev

Php artisan migrate

Adding Mobile
[ blade,
model,
migration,
controller ]







path : C:\Users\Srini\AppData\Roaming\Composer\vendor\bin


 Laravel new <projectName>      
composer create-project --prefer-dist laravel/laravel <projectname>    
composer create-project  laravel/laravel <projectname>  



 php artisan serve
php artisan serve --port=5458
php artisan config:cache

php artisan list
php artisan stub:publish

php artisan make:middleware CheckUser


 php -v
version greater than 7.3









 Dumps


{{route('deleteuser@adminController',$user->id)}}
{{url(‘/users’}}
 <a href="{{route('deleteuser@adminController',$user->id)}}">DELETE</a>

Route::get('/deleteuser/{id}',[AdminController::class,'deleteuser'])->name('deleteuser@adminController');




 $image = $req->file('image_file');
 $image_name = time().'.'.$image->getClientOriginalExtension();
       $destinationPath = public_path('assets/food-images');
       $image->move($destinationPath,$image_name); 

-

style="background-image:url({{asset('assets/food-images')}}/{{$food->image}})
 <img src="{{asset('food-images')}}/{{$food->image}}" width="200" height="155">


redirect()->route('category.index')->with('message','Category Updated');
redirect()->back()->with('message','Category Created');


-






$orders = Order::latest()->where('user_id',auth()->user()->id)->get();
$pizzas = Pizza::latest()->get();
 $pizzas = Pizza::where('category',$request->category)->get();
$pizza = Pizza::find($id); 
 $orders = Order::latest()->where('user_id',auth()->user()->id)->get();

ARTISAN


 php artisan config:cache
php artisan cache:clear
php artisan view :clear
Php artisan routes:clear

php artisan storage:link







 AUTH

 Auth::check()
{{ auth()->user()->name }}
 use Illuminate\Support\Facades\Auth;


public function redirectLogin(){

        $userType = Auth::user()->isAdmin;

         if($userType === 1){
             return view('admin.home');
         }
         else {
             return view('home.index');
         }
}




 class UserController extends Controller
{
    /**
     * Instantiate a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');

        $this->middleware('log')->only('index');
    }
}
 class UserController extends Controller
{
    /**
     * Instantiate a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth')->except('index');
        
        //Multiple exclude
        $this->middleware('log')->except(['index','privacy']);
    }
}








 BLADE /views

 https://laravel.com/docs/8.x/views



 @include('headers')
-
@php

        $name = 'jennifer';
        $fruits = array('Mango','Apple','Orange','Banana','Pineapple');
        $age =28;    

@endphp

<body>
        <h3>Test Page</h3>

        {{  $name }}
-
        <h3>Fruit List</h3>

        @foreach ($fruits as  $fruit)
                 <ul>
                         <li>{{ $fruit }}</li>
                 </ul>
        @endforeach
  
-


        @for($i=0;$i<=10;$i++)
            {{  $i }}  <br />
          @endfor 


@if(count($fruits)==1)
                Single  Fruit        
           @elseif(count($fruits) > 1)
                   More Than One Fruit 
             @else        
                        No Fruit
             @endif


             <br />

 {{   $age >18 ? "You are an adult":"You are not an adult" }}

<br />

@foreach($data as $item)
    <p>
         {{item }}
    </p>
@endforeach
@yield('content')
@yield('title')
@extends('templates/basicpage')

@section('content')
@endsection
@section('title','titleName')

<li class='nav-item'>
   <a class='nav-link' href='/about'>About</a>
<li>
<li class='nav-item'>
   <a class='nav-link' href='/contact'>Contact Us</a>
<li>



Controllers


 php artisan make:controller UserController

 project_folder/app/http/controllers


class TempController extends Controller
{
    function tempTwo(){
        $title = ' My name is srini and i am from chennai';
        return view('tempTwo',compact('title'));
        return view('tempTwo')->with('title',$title)
    }
function tempTwo(){
        $title = ' My name is srini and i am from chennai';
        $description = ' This is the second line of text added';
        $data = [
            'productOne' =>'Iphone',
            'productTwo'=>'Samsung',
            'productThree'=>'Xiaomi'
        ];
       // return view('tempTwo',compact('title','description'));
      // return view('tempTwo')->with('data',$data);

      return view('tempTwo',['title'=>$title,'description'=>$description,'data'=>$data]);
    }


class TempController extends Controller
{

    function tempOne(){
        return 'This is from the TempController';
    }

    function tempTwo(){
        $title = ' My name is srini and i am from chennai';
     $description ='This is description'
return view('tempTwo',compact('title','description));
   return view('tempTwo')->with('title',$title)
    }

 use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class PostController extends Controller
{
   public function getAllPosts() {
       $posts = DB::table('posts')->get();
       return view('posts',compact('posts'));
   }



public function __construct()
    {
        $this->middleware('auth', ['except' => ['index', 'show']]);
    }

public function insertEmployee(){
         dd("Employees inserted");
        
    }







Cheat Sheet

 Blade

DB

DB
 https://learninglaravel.net/cheatsheet/#blade

https://justetcsocialservices.medium.com/laravel-query-builder-cheatsheet-a2ffc6c67145




 Faker

 https://zetcode.com/php/faker/
 database/seeders/DatabaseSeeder.php





 composer dump-autoload
php artisan db:seed


 LINKS


Topic 
 Link

 Laravel Auth 
 https://www.avyatech.com/role-based-authentication-authorization-in-laravel/


 https://www.techiediaries.com/laravel-6-ajax-crud-tutorial-with-bootstrap-modal-and-pagination-example/


 https://larainfo.com/blogs/laravel-inertia-js-crud-with-react-tutorial

 Mail
 https://www.youtube.com/watch?v=GSwvW3_lXvs&list=PL-OHVhAxtpSCsyXGVBKDqmrzRP7j8Dmr9&index=2


 Models

 protected $fillable = ['name','gender','department','email','phone','image'];


protected $guarded = [];
  







 Models Eloquent -  One to One

 User.php
public function address(){
         return $this->hasOne(Address::class,'user_id','id');
     }


(model,foreignkey,primarykey)
 Route::get('/insertProfile',function(){
     $user = User::find(3);
     $profile =  new Profile;
     $profile->locality = 'Gurugram';
     $profile->city = "Delhi";
     $user->profile()->save($profile);
});

Route::get('/getProfile',function(){

    $user = User::find(1);
    //return $user->profile;
    return $user->profile->city;
});

Route::get('/findUser',function(){

     return Profile::find(1)->user; 

});








MIDDLEWARE 



 public function handle(Request $request, Closure $next)
    {
        if(Auth::user()->userType === 'admin')
        {
            return $next($request); 
        }
        else{
            session().flush();
            return redirect()->route('login');
        }
     
    }


 public function __construct()
   {
       $this->middleware('auth');
       $this->middleware('log')->only('index');
       $this->middleware('subscribed')->except('store');
   }










Migration

 https://www.codegrepper.com/code-examples/php/migrate+specific+table+laravel

 php artisan migrate:rollback - Rollback The Last Migration Operation
php artisan migrate:reset -Rollback all migrations -
php artisan migrate:refresh - Rollback all migrations and run them all again
php artisan migrate:rollback --step=[x]  - To rollback multiple steps:



To rollback one step:
php artisan migrate:rollback

To drop all tables and reload all migrations:
php artisan migrate:refresh

php artisan migrate:fresh -> clears all data in all table

php artisan migrate:refresh
Php artisan migrate:reset


https://laravel.com/docs/4.2/schema

$table->id();
$table->string('name')->nullable();
$table->bigIncrements(user_'id')->unsigned():
$table->increments('id');
$table->text('description');
$table->integer('price');
$table->bigInteger(‘phone’->unsigned());
$table->integer('category_id');       
$table->timestamps();
$table->string('email')->unique(); $table->string('usertype')->default(0);            $table->timestamp('email_verified_at')->nullable();
$table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');

-

$table->id();
$table->bigInteger('user_id')->unsigned();
$table->string('title');
$table->text('body');                     $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
 $table->timestamps();


php artisan make:migration add_gender_to_users_table --table=users

 To migrate only one table 
php artisan migrate:refresh --path=/database/migrations/fileName.php








TEMPLATES



  https://www.bootstrapdash.com/free-back-end-simple-admin-panel-templates/

https://github.com/BootstrapDash/corona-free-dark-bootstrap-admin-template

https://templatemo.com/tm-558-klassy-cafe

https://themekit/lavalite.org

https://quickadminpanel.com/

https://startbootstrap.com/template/sb-admin


https://github.com/BootstrapDash/corona-free-dark-bootstrap-admin-template


https://github.com/ThemeKit/BootstrapAdmin

 









 Routes

 https://laravel.com/docs/8.x/routing

 Routes are defined in web.php and api.php in the Routes directory

 Route::get('/users/{name}', function($name){
    return view('users',['name'=>$name]);
});
 Route::match(["get","post"],'/students',function(Request $req){
    return "Requested method is ".$req->method();
 });

 Route::any('/posts',function(Request $req){
return 'Requested method is '.$req->method();
});

Route::redirect('/here', '/there');
Route::get('/users','function(){
  return(redirect('/'):
})

 use App\Http\Controllers\UserController
Route::get("/user/{id}",[UserController::class,'show'])
 Route::get("/user",[UserController::class,'show'])->name('user.show')

public function show(){
     return "Hi from User Controller";
}

 RouteServiceProvider.php
Route::pattern('name','A-z0-9_/-]+');
Route::pattern('id','[0-9]+');
 Route::get('/products','App\Http\Controllers\ProductsController@index')

 <a href="{{route('deleteuser@adminController',$user->id)}}">DELETE</a>
<a href =”url(‘/deleteUser”,$user->id)”>DELETE</a>
Route::get('/deleteuser/{id}',[AdminController::class,'deleteuser'])->name('deleteuser@adminController');

 Route::get('/createUsers',function (){
    User::factory()->count(3)->create();

});

Route::get('/createAddress', function(){
    \App\Models\Address::create([
        'user_id'=>2,
        'locality'=>'dadar',
        'city'=>'mumbai'
    ]);
    \App\Models\Address::create([
        'user_id'=>3,
        'locality'=>'gurugram',
        'city'=>'delhi'
    ]);
});


Route::get('/flights', function () {    // Only authenticated users may access this route…
})


 Route::group(['middleware'=>['auth','has.permission']],function(){
Route::get('/', function () {    return view('welcome');
});
Route::resource('departments','DepartmentController');
Route::group(['as' => 'frontend.'], function () {    includeRouteFiles(__DIR__.'/frontend/');
});

/*
Route::group(['prefix' => 'admin', 'as' => 'admin.', 'middleware' => 'admin'], function () {
    includeRouteFiles(__DIR__.'/backend/');
});
Route::resource('leaves','LeaveController');                         Route::post('accept-reject-leave/{id}','LeaveController@acceptReject')->name('accept.reject'); Route::resource('notices','NoticeController');                             Route::get('/mail','MailController@create')->name('mails.create'); Route::post('/mail','MailController@store')->name('mails.store');
});


Route::namespace('App\Http\Controllers\api')->group(function(){    Route::Resource('/device',DeviceAPIController::class);     Route::Resource('/sendbulk',SendBulkAPIController::class);
});




























Session 

 $userId = Session::get(‘user’)[‘id’]
Session::get('user')['name']
Session::forget(‘user’)






































 Seeder

 php artisan make:seeder UserTableSeeder
php artisan db:seed --class UserSeeder
 Route::get('/createUsers', function(){
$users = User::factory()->count(10)->create();
})

 Bcrypt

php artisan db:seed

public function run()
    {
        // \App\Models\User::factory(10)->create();

        $user = new User();
        $user->name = 'admin';
        $user->email = 'admin@srinis.com';
        $user->password = bcrypt('abcd1234');
        $user->is_admin = 1;
    }
 \App\Models\Post::create(
[
 ‘User_id’: 1
  ‘Locality:’Nandanam’
  ‘City:’Chennai’
]
)



















 DATABASE

 $user_id = Auth::id() // getting the user id 
$count = Cart::where('user_id',$user_id)->count() // counting the number of items
-
$data = Cart::where('user_id',$id)->join('food','carts.food_id' '=', 'food.id')->get()
-
$products = Product::where('name' ,'like' , '%'.$req->input('query').'%')->get();

-
Cart::destroy($id)
Here are the different types of the JOINs in SQL:
* 
* (INNER) JOIN: Returns records that have matching values in both tables
* 
* LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
* 
* RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
* 
* FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table
-

public function innerJoinClause(){

       $request =  DB::table('users')->join('posts','users.user_id','=','posts.user_id')->select('users.username','posts.post_title','posts.post_body')->get();
        return $request;            
    }

    public function leftJoinClause(){

        $result = DB::table('users')->leftJoin('posts','users.user_id','=','posts.user_id')->get();       
        return $result;
       }

       public function rightJoinClause(){

        $result = DB::table('users')->rightJoin('posts','users.user_id','=','posts.user_id')->get();       
        return $result;

       }









Database - Basics

 Food::get()
Food:latest()
Food::find($id)



 Database - Curd

 <?php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Food;
use App\Models\Category;
use Illuminate\Support\Facades\Auth;

class FoodController extends Controller
{
    
    public function index()
    {
        $foods = Food::latest()->paginate(2);
        return view('food.index',compact('foods')) ;        
    } 
    public function create()
    {
        return view('food.create');
    }
 
    public function store(Request $request)
    {
       $this->validate($request, [
           'name' => 'required',
           'description' =>'required',
           'price'=>'required  | integer ',
           'category'=>'required',
           'image' =>'required|mimes:png,jpeg,jpg'
       ]);
       $image = $request->file('image');
       $name = time().'.'.$image->getClientOriginalExtension();
       $destinationPath = public_path('/images');
       $image->move($destinationPath,$name);
       Food::create([
           'name' => $request->get('name'),
           'description' =>$request->get('description'),
           'price'=>$request->get('price'),
           'category_id' => $request->get('category'),
           'image'=>$name           
       ]);
       return redirect()->back()->with('message','New Food Item Added Successfully');
    }

   public function show($id)
    {  
    } 
    public function edit($id)
    {
        $food = Food::find($id);
        return view('food.edit',compact('food'));
    } 
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'name' => 'required',
            'description' =>'required',
            'price'=>'required  | integer ',
            'category'=>'required',
            'image' =>'mimes:png,jpeg,jpg'
        ]);
        
        $food  = Food::find($id);
        $image_name = $food->image;
        if($request->hasFile('image')){
            
                $image = $request->file('image');
                $image_name = time().'.'.$image->getClientOriginalExtension();
                $destinationPath = public_path('/images');               $image->move($destinationPath,$image_name);            
        }        
        $food->name = $request->get('name');
        $food->description = $request->get('description');
        $food->price = $request->get('price');
        $food->category_id = $request->get('category');
        $food->image = $image_name;
        $food->save();
        return redirect()->back()->with('message',' Food  Updated Successfully');
    } 
    public function destroy($id)
    {
        $food  = Food::find($id);
        $food->delete();
        return redirect()->route('food.index')->with('message','Food Deleted');
    }
    public function frontEndList(){
          $categories = Category::with('food')->get();
          return view('food.frontEndView',compact('categories'));
}
 public function view($id){
     $food = Food::find($id);
     return view('food.detail',compact('food'));
 }
}








<div class="container">
 <div class="row justify-content-center">
  <div class="col-md-8">
     @if(Session::has('message'))
     <div class='alert alert-success'>
             {{  Session::get('message') }}
      </div>
 @endif
    <div class="card">
 <form action="{{ route('food.store') }}"  method='post'     enctype='multipart/form-data'>
   @csrf
    <div class="card-header">
      Add Food Item
     </div>
     <div class="card-body">
     <div class="form-group">
     <label for='name'>Name</label>
    <input type='text' name="name"  id="name"                                 class="form-control  @error('name') is-invalid @enderror">
 @error('name')
  <span class='invalid-feedback' alert='alert'>
   <strong>{{ $message }}</strong>
    </span>
 @enderror                                      
                   </div>
                    <div class="form-group">
                 <label for='description'>Description</label>
                <textarea  name='description' id='description'
 class='form-control @error('description') is-invalid @enderror'
                                        >
           </textarea>
          @error('description')
          <span class='invalid-feedback' alert='alert'>
       <strong>{{ $message }}</strong>
          </span>
          @enderror
    </div>
    <div class="form-group">
     <label for='price'>Price</label>
     <input type='number' name="price"  id="price"
    class="form-control @error('price') is-invalid @enderror">
     @error('price')

    <span class='invalid-feedback' alert='alert'>
     <strong>{{ $message }}</strong>
     </span>                                     
  @enderror
    </div>
     <div class="form-group">
       <label for='category'>Category</label>

 <select name='category' id='category'
    class="form-control @error('category') is-invalid @enderror">
  <option value="">Select Category</option>
                                              @foreach(App\Models\Category::all() as $category)
     <option value='{{ $category->id }}'>
     {{ $category->name }}
       </option>
   @endforeach
   </select>
    @error('category')
    <span class='invalid-feedback' alert='alert'>
        <strong>{{ $message }}</strong>
            </span>
          @enderror
           </div>
  <div class="form-group">
 <label for='image'>Image</label>
 <input type='file' name="image"  id="image" 
                                        class="form-control  @error('image') is-invalid @enderror">

 @error('image')
  <span class='invalid-feedback' alert='alert'>
   <strong>{{ $message }}</strong>
   </span>
  @enderror
                                     </div>
                                     <div class="form-group">
                                         <Button class='btn btn-outline-primary m-2' type='submit'>Add Food</Button>
                                     </div>
                                 </div>
                                </form>
                         </div>
                 </div>
         </div>
 </div>


















function search(Request $req) {
        $search = $req->input('search');
        $employees = Employee::query() 
   ->where('name', 'LIKE',"%{$search}%")
   ->orwhere('email','LIKE'."%{$search}%")         
   ->get();
       return view('allemployees', compact('employees')); 
    }

<div class="form-group">       
 <label for='image'>Image</label>    
  <input type='file' name="image"  id="image" 
  class="form-control  @error('image') is-invalid @enderror">                            
</div>
@error('image')
 <span class='invalid-feedback' alert='alert'>                                <strong>{{ $message }}</strong> </span>                                     @enderror




 





FORMS

 https://getbootstrap.com/docs/5.0/forms/overview/

 <form action="{{ route('pizza.store') }}" method='POST' enctype="multipart/form-data">
        @csrf
          <div class="form-group">
            <label for="Name"> Name of the Pizzas</label>
  <Input type="text" name='name' id='name' class="form-control" />
                     </div>
                     <div class="form-group">
  <label for="Description"> Description of the Pizza</label>
 <textarea class="form-control" name='description' id='description'></textarea>
                        </div>
                        <div class="form-inline">
     <label for="">Pizza Price &nbsp;&nbsp;</label>
     <input type="text" class="form-control mr-1" name='small_pizza_price' placeholder="Small Pizza Price">
  <input type="text" class="form-control mr-1" name='medium_pizza_price' placeholder="Medium Pizza Price">
  <input type="text" class="form-control" name='large_pizza_price' placeholder="Large Pizza Price">                            
  </div>
  <div class="form-group">
 <label for="Category"> Category of the Pizza</label>
  <select class="form-control" name='category'>
                              <option value=''>Select a Pizza</option>
   <option value='vegetarian'>Vegetarian Pizza</option>
   <option value='nonvegetarian'>Non Vegetarian Pizza</option>
  <optionn value='traditional'>Traditional Pizza</option>
                            </select>                             
                        </div>
                        <div class="form-group">
                            <label for="">Pizza Image</label>
                            <input type="file" class="form-control" name='pizza_img' id='pizza_img'>
                        </div>
                        <div class="form-group text-center">
                            <button class="btn btn-success" type='submit'>Submit</button>
                        </div>


                    </div>
                </form>








Validation

 $this->validate($request,[
         'name'  => 'required'
       ]);

-
 public function store(Request $request)
{
    $this->validate($request, [
        'name' => 'required',
        'description' =>'required',
        'price'=>'required  | integer ',
      'category'=>'required',
     'image' =>'required|mimes:png,jpeg,jpg'
    ]);
}

@error('name')
  <span class="text-danger">
  {{ $message }}
   </span>
@enderror

-
<div class="form-group">
<label for='name'>Name</label>  
<input type='text' name="name"  id="name"                                    class="form-control  @error('name') is-invalid @enderror">
@error('name')
<span class='invalid-feedback' alert='alert'>
<strong>{{ $message }}</strong>
</span>
@enderror
</div>

                         @if(count($errors) >0)
                        <div class='alert alert-danger'>
                         @foreach($errors->all() as $error)
                         <p> {{ $error }}
                         @endforeach
                         </div>
                        @endif








 MIDDLEWARE

 public function handle(Request $request, Closure $next)
    {
        if(auth()->check() && auth()->user()->is_admin == 1){
            return $next($request);
        }
 
        return redirect('login');
       
    }
 
-
 





























!@#$%^&*())(*&^%$#@!!@#$%^&*())(*&^%$#@!!@#$%^&*()!@#$%^&*())(*&^%$#@!!@#$%^&*())(*&^%$#@!!@#$%^&*()!@#$%^&*())(*&^%$#@!!@#$%^&*())(*&^%$#@!!@#$%^&*()!@#$%^&*())(*&^%$#@!!@#$%^&*())(*&^%$#@!!@#$%^&*()!@#$%^&*())(*&^%$#@!!@#$%^&*())(*&^%$#@!!@#$%^&*()!@#$%^&*())(*&^%$#@!!@#$%^&*())(*&^%$#@!!@#$%^&*()!@#$%^&*())(*&^%$#@!!@#$%^&*())(*&^%$#@!!@#$%^&*()








CSS
mix.js('resources/js/app.js', 'public/js')
    .sass('resources/scss/app.scss', 'public/css', [
        //
    ]);

npm install
npm run dev
npm run watch




<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
 <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet" >

   <title>@yield(''title'')</title>
  </head>
  <body>
    <h3>@yield('page-heading')</h3>
   <div class=row>
  
       <div class="col-md-8">@yield('content')</div>

      <div class="col-md-4">@yield('sidebar')</div>

   </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js" ></script>
 
  </body>
</html>
!DOCTYPE html>
<html lang="en">
  <head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">  
<title>Bootstrap 101 Template</title>
<link href="css/bootstrap.min.css" rel="stylesheet">
   <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
 
   <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
 
 
  </head>
  <body>
<h1>Hello, world!</h1>

   
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    
<script src="js/bootstrap.min.js"></script>
  </body>
</html>
 









  


 FORM



$req->method();
$req->path();
$req->url();
$req->fullUrl();

 
 <form method='POST' action={{ route('loginSubmit') }}>
                                        @csrf
 <div class="mb-3">
 <label for="Email" class="form-label text-success">Email address</label>
 <input type="email" class="form-control" id="email" name='email' >
  @error('email')
    <span class='text-danger'>{{ message }}</span>
    enderror
 </div>

 </form>
public function loginSubmit(Request $req){
        // return  $req->all();

        $validatedData = $req.validate(
            [
            'email '=> 'required|email',
            'password' =>'required|min:6|max:12'
            ]       
            );
        $email = $req->input('email');
        $password = $req->input('password');
        return 'Email:'.$email."Password:".$password;
     }

Route::post('/login',[LoginController::class,'loginSubmit'])->name('loginSubmit');



Fluent Stings

  use Illuminate\Support\Str;

       $myString = Str::of(("Welcom to Wasan World"))->after("to");   

       $myString = Str::of("App\Http\Controllers\Controller")->afterLast("\\"); 

       $myString = Str::of("Wasan  ")->append("  World");    

       $myString = Str::of("LARAVEL 8")->lower();   

       $myString =Str::of("LARAVEL 8.0")->replace("8.0","7.0");

       $myString = Str::of("this is a title")->title();    

       $slug = Str::of("Laravel 8 Framework")->slug('.');   

       $str = Str::of("Wasan World is a great place to work")->substr(12);

        $trimmed = Str::of("/Wasan World")->trim('/'); 

       $myString = Str::of("wasan world ")->upper();


Database
use IIluminate\Support\Facades\DB;
$posts = DB::select('select * from posts");
$posts = DB::select('select * from posts WHERE id=?",[7]);
$posts = DB::select('select * from posts WHERE id=:id",['id'=>7]);

$posts  DB::table('posts')
                 ->where ('id',$id)
                 ->get();




MODELS


php artisan make:model Student
in the model file created
protected $table = 'students'

in the controllers file add
use App\Model\Post

$post = Post::all();

php artisan make:migration create_posts_table --create=posts
go to create-posts-table file in migrations
create the schema
migration -> php artisan migrate
rollback =>php artisan rollback
refresh ->php artisan refresh - resets the tables


SEEDING

php artisan make:seeder UserTableSeeder
composer dump-autoload
php artisan db:seed
php artisan migrate:fresh --seed
class UsersTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
    
         $faker = Faker::create();
            foreach(range(1,100) as $index){
                DB::table('users')->insert([
                    'name'=>$faker->name('female')
                ]);
            }
   
    
     }
}









ELOQUENT- create data
create database
update database name in env file
php artisan make:model student -m
create schema in migrations folder
 public function up()
    {
        Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('phone');
            $table->string('email');
            $table->string('department');
            $table->timestamps();
        });
    }

add this line in model file
protected $table = 'students';
php artisan migrate





go to seeder file and eidt it

<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Faker\Factory as Faker;
use Illuminate\Support\Facades\DB;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     *
     * @return void
     */
    public function run()
    {
        // \App\Models\User::factory(10)->create();

        $faker = Faker::create();

        foreach(range(1,150)  as $index){
            DB::table('students')->insert(
                [
                    'name ' => $faker->name,
                    'phone'  => $faker->phone,
                    'email'   =>$faker->email,
                    'department'  => $faker->department
                ]
            );
        }
    }
}

go to command prompt
comoposer dump-autload















































@php

@endphp

@yield('content')

@extends('templates.basicPage')

@section('title','Posts Page')

@section('content')
@endsection

URL()

  <img src={{ URL('images/icon-box.jpg') }} alt="" />
 <img src={{ asset('images/icon-box.jpg}}  alt='' />
 




@[structure]
@[endstructure]


php artisan present bootstrap
php artisan present react
php artisan ui tailwind css

php artisan ui tailwindcss

laravel frontend presets


@if()
@elseif()
@else()
@endif


@unless()
@endunless

@empty()
@endempty


@switch($type)
     @case(1)
        break
     @case(2)
        break

      @default
@endswitch
@for($i=0;$<10;$i++)

the number is {{ i}}

@endfor


@foreach($collection as $item)
<p> {{$item}}</p>
@endforeach


@forelse($names as $name)
<h2>The name is {{name}} </h2>
@empty
<h2>There are no names </h2>
@endforelse


@while()

@endwhile


class UserController extends Controller
{
    
function show($id)

{
 
  return ("hello ". $id);

    }


}

class TempController extends Controller
{

    function tempOne(){
        return 'This is from the TempController';
    }

    function tempTwo(){
        $title = ' My name is srini and i am from chennai';
        return view('tempTwo',compact('title'));

   return view('tempTwo')->with('title',$title)
    }
=======================================
  function tempThree(){

  $title = "This is my first page"
  $data = [
            'productOne' =>'Iphone',
            'productTwo'=>'Samsung',
            'productThree'=>'Xiaomi'
        ];
 
     return view('tempTwo')->with('title',$title);
       return view('tempTwo')->with('data',$data);
}
============================================
function tempTwo(){
        $title = ' My name is srini and i am from chennai';
        $description = ' Thisi is the second line of text added';
        $data = [
            'productOne' =>'Iphone',
            'productTwo'=>'Samsung',
            'productThree'=>'Xiaomi'
        ];
       // return view('tempTwo',compact('title','description'));
      // return view('tempTwo')->with('data',$data);

      return view('tempTwo',['title'=>$title,'description'=>$description,'data'=>$data]);
    }

Route::get('/', function () {
return view('welcome');
});

Route::get('user/{id}',[UserController::class,'show']);

//Route::get('user',[UserController::class,'show'])

Route::get('/products/{name}',[ProductController::class,'show']);
   public function show($name){

       $data = [
           'iphone' => 'iPhone',
           'samsung' =>'Samsung'
       ];

       return view('products.index', [
           'products' => $data[$name] ??  'Product ' .$name. 'does not exist' ]);

    }
<h1>Products</h1>
        <p>{{  $products }}</p>








