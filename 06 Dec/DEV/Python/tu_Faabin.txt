 

























CLASSES AND OBJECTS 
1. What is a class ?
 A class is logical grouping of attributes(variables) and methods(functions) 
Syntax: class ClassName: # class body Example: class Employee: # class body

 2. What is an object ?
 Object is an instance of a class that has access to all the attributes and methods of that class
 Syntax: objectName = ClassName() Example: employee = Employee()
 # The object employee now has access to all the attributes and methods of the class Employee. You will be learning more about attributes and methods in the next section. 

3. What is object instantiation ?
 The process of creation of an object of a class is called instantiation

1. What is encapsulation ? 
Hiding the implementation details from the end user is called as encapsulation 
2. What is abstraction ?
 Abstraction is the process of steps followed to achieve encapsulatio

class Library:
    def __init__(self, listOfBooks):
        self.availableBooks = listOfBooks;

    def listAllBooks(self):
        for book in self.availableBooks:
            print(book);

    def lendBook(self, requestedBook):
        if requestedBook in self.availableBooks:
            self.availableBooks.remove(requestedBook);
            print("You have now borrowed the book");
        else:
            print("Book is currently undavilable");

    def addBook(self, returnedBook):
        self.availableBooks.append(returnedBook);
        print("Thank You for returning the book");


class Student:
    def requestBook(self):
        print("The following books are avaiable");
        print(library.listAllBooks());
        print("Please Enter the book you want to borrow")
        self.book = input();
        return self.book;

    def returnBook(self):
        print("Please Enter the book you want to return");
        self.book = input();
        return self.book


student = Student();
library = Library(['Suhaag', 'Sagar', 'Sholay', 'Shann', 'Tiger', 'Pathan']);

print("Enter 1 to Show List of All Books");
print("Enter 2 to Request for a Book");
print("Enter 3 to Return a Book");
print("Enter 4 to Exit");

while True:
    userChoice = int(input());
    if userChoice == 1:
        library.listAllBooks();
    elif userChoice == 2:
        requestedBook = student.requestBook();1
        library.lendBook(requestedBook);
    elif userChoice == 3:
        returnedBook = student.returnBook();
        library.addBook(returnedBook);
    elif userChoice == 4:
        quit();


class Car:
    def __init__(self):
        # A dictionary to map the type of car and price per day
        self.carFare = {'Hatchback': 30, 'Sedan': 50, 'SUV': 100}

    def displayFareDetails(self):
        print("Cost per day: ")
        print("Hatchback: $",self.carFare['Hatchback'])
        print("Sedan: $", self.carFare['Sedan'])
        print("SUV: $", self.carFare['SUV'])

    def calculateFare(self, typeOfCar, numberOfDays):
        # Calculate the fare depending upon the type of car and number of days as requested by the user
        return self.carFare[typeOfCar] * numberOfDays


car = Car()
while True:
    print("Enter 1 to display the fare details")
    print("Enter 2 to rent a car")
    print("Enter 3 to exit")
    userChoice = (int(input()))
    if userChoice == 1:
        car.displayFareDetails()
    elif userChoice == 2:
        print("Enter the type of car you would like to borrow")
        typeOfCar = input()
        print("Enter the number of days you would like to borrow the car")
        numberOfDays = int(input())
        fare = car.calculateFare(typeOfCar, numberOfDays)
        print(f"Total payable amount: {fare}")
        print("Thank you!")
        print("")
    elif userChoice == 3:
        quit()

class Furniture:
    def __init__(self):
        self._typeOfWood = "Teakwood"

class Chair(Furniture):
    def __init__(self):
        # super is used to call base class methods. You will learn more about super in next section.
        # Here we are calling the init of our base class to initialise the type of wood as Teakwood
        super().__init__()
        self.__numberOfLegs = 4

    def setWoodType(self, typeOfWood):
        self._typeOfWood = typeOfWood

    def displayChairSpecification(self):
        print("This chair is made of {} and has {} legs".format(self._typeOfWood, self.__numberOfLegs))

chair = Chair()
print("Would you like to change the type of wood from Teakwood? Y/N")
userChoice = input()
if userChoice is 'Y':
    print("Enter the type of wood you would like your chair to be made of")
    typeOfWood = input()
    chair.setWoodType(typeOfWood)
chair.displayChairSpecification()










import csv


class Item:
 
    pay_rate = 0.8 # The pay rate after 20% discount
 
    all = []
 
    def __init__(self, name: str, price: float, quantity=0):
 
        # Run validations to the received arguments
 
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
 
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"



        # Assign to self object
 
        self.name = name
 
        self.price = price
 
        self.quantity = quantity



        # Actions to execute
 
        Item.all.append(self)



    def calculate_total_price(self):
 
        return self.price * self.quantity



    def apply_discount(self):
 
        self.price = self.price * self.pay_rate



    @classmethod
 
    def instantiate_from_csv(cls):
 
        with open('items.csv', 'r') as f:
 
            reader = csv.DictReader(f)
 
            items = list(reader)



        for item in items:
 
            Item(
 
                name=item.get('name'),
 
                price=float(item.get('price')),
 
                quantity=int(item.get('quantity')),
 
            )



    @staticmethod
 
    def is_integer(num):
 
        # We will count out the floats that are point zero
 
        # For i.e: 5.0, 10.0
 
        if isinstance(num, float):
 
            # Count out the floats that are point zero
 
            return num.is_integer()
 
        elif isinstance(num, int):
 
            return True
 
        else:
 
            return False



    def __repr__(self):
 
        return f"Item('{self.name}', {self.price}, {self.quantity})"









