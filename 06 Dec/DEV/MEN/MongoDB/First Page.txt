
https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-windows/




 show dbs

show collections

use [dbname]

db.dropDatabase()
db.createCollection('books')

Mongosh

db.[tableName].insertOne()

db.[tableName].insertMany([])

db.[tableName].find()

db.[tableName].find().limit()

db.[tableName].find.sort({fieldName:1,fieldName:-1}).limit()

db.[tableName].find().skip().limit()

db.[tableName].find({filedName:value}) 

db.[tableName].find({name:’wasan}{name:1,age:1,city:0})

db.[tableName].find({name: {$eq:”wasan”}})

db.[tableName].find({name: {$ne:”wasan”}})

db.[tableName].find({age: {$gt:16}})

db.[tableName].find({age: {$gte:16}})

db.[tableName].find({age: {$lt:16}})

db.[tableName].find({name: {$in:[]}})

$eq,$ne,$gt,$gte,$le,$in,$nin

db.[tableName].find({age: {$exists:true}})

db.[tableName].find({age: {$lte:40,$gte:20}})

db.[tableName].find({age: {$lte:40,$gte:20},name:’wasan})

db.user.updateOne({age:26},{set:{age:27}})

db.users.updateOne({_id:1},{$rename:{name:'firstName'}})

db.users.updateOne{{_id:1},{unset:{age:"}}

db.[tableName].find({filedName:value})

Database = Database
Table = Collections
Rows = Documents
Columns = Fields

MongoDB Cheat Sheet



#
## Show All Databases


 
show dbs
`
 
## Show Current Database


 
db 
 
## Create Or Switch Database


 
use acme

 


 
## Drop


 
db.dropDatabase()
`
 


 
## Create Collection


 
db.createCollection('posts')
`
 
## Show Collections


 
show collections
`
 
## Insert Row


 
db.posts.insert({
 
  title: 'Post One',
 
  body: 'Body of post one',
 
  category: 'News',
 
  tags: ['news', 'events'],
 
  user: {
 
    name: 'John Doe',
 
    status: 'author'
 
  },
 
  date: Date()
}
})
`
 
## Insert Multiple Rows


 
 
db.posts.insertMany([
 
  {
 
    title: 'Post Two',
 
    body: 'Body of post two',
 
    category: 'Technology',
 
    date: Date()
 
  },
 
  {
 
    title: 'Post Three',
 
    body: 'Body of post three',
 
    category: 'News',
 
    date: Date()
 
  },
 
  {
 
    title: 'Post Four',
 
    body: 'Body of post three',
 
    category: 'Entertainment',
 
    date: Date()
 
  }
]
])
`
 


 
## Get All Rows



`
 
db.posts.find()
`
 


 
## Get All Rows Formatted



`
 
db.posts.find().pretty()
`
 
## Find Rows


 
db.posts.find({ category: 'News' })
`
 
## Sort Rows


 
# asc
d
db.posts.find().sort({ title: 1 }).pretty()
#
# desc
d
db.posts.find().sort({ title: -1 }).pretty()
`

## Count Rows


 
db.posts.find().count()

db.posts.find({ category: 'news' }).count()
`
 
## Limit Rows


 
db.posts.find().limit(2).pretty()
`
 
## Chaining


 
db.posts.find().limit(2).sort({ title: 1 }).pretty()
`
 
## Foreach


 
db.posts.find().forEach(function(doc) {
 
  print("Blog Post: " + doc.title)
}
})
`
 
## Find One Row


 
db.posts.findOne({ category: 'News' })
`
 
## Find Specific Fields


 
db.posts.find({ title: 'Post One' }, {
 
  title: 1,
 
  author: 1
}
})
`
 
## Update Row


 
db.posts.update({ title: 'Post Two' },
{
{
 
  title: 'Post Two',
 
  body: 'New body for post 2',
 
  date: Date()
}
},
{
{
 
  upsert: true
}
})
`
 
## Update Specific Field


 
db.posts.update({ title: 'Post Two' },
{
{
 
  $set: {
 
    body: 'Body for post 2',
 
    category: 'Technology'
 
  }
}
})
`
 
## Increment Field (\$inc)


 
db.posts.update({ title: 'Post Two' },
{
{
 
  $inc: {
 
    likes: 5
 
  }
}
})
`
 
## Rename Field


 
db.posts.update({ title: 'Post Two' },
{
{
 
  $rename: {
 
    likes: 'views'
 
  }
}
})
`
 
## Delete Row


 
db.posts.remove({ title: 'Post Four' })
`
 
## Sub-Documents


 
db.posts.update({ title: 'Post One' },
{
{
 
  $set: {
 
    comments: [
 
      {
 
        body: 'Comment One',
 
        user: 'Mary Williams',
 
        date: Date()
 
      },
 
      {
 
        body: 'Comment Two',
 
        user: 'Harry White',
 
        date: Date()
 
      }
 
    ]
 
  }
}
})
`
 
## Find By Element in Array (\$elemMatch)


 
db.posts.find({
 
  comments: {
 
     $elemMatch: {
 
       user: 'Mary Williams'
 
       }
 
    }
 
  }
)
)
`
 
## Add Index


 
db.posts.createIndex({ title: 'text' })
`
 
## Text Search


 
db.posts.find({
 
  $text: {
 
    $search: "\"Post O\""
 
    }
}
})
`
 
## Greater & Less Than


 
db.posts.find({ views: { $gt: 2 } })
d
db.posts.find({ views: { $gte: 7 } })
d
db.posts.find({ views: { $lt: 7 } })
d
db.posts.find({ views: { $lte: 7 } })
`
```
db.collection.insertOne() 
d
db.collection.insertMany()

db.users.insertOne(
 
    { name: "John", surname: "Doe" }
)
) 
d
db.users.insertMany(
 
    { name: "John", surname: "Doe" },
 
    { name: "Jean", surname: "Dudule" }
)
)


Note : If the collection does not currently exist, insert operations will create the collection.
Find (see Query operators)
db.collection.find()

db.users.find(
 
    { age: { $gt: 18 } }
)
)


Update (see Query/Update operators)
db.collection.updateOne()
d
db.collection.updateMany()
d
db.collection.replaceOne()

db.users.updateMany(
 
    { age: { $gt: 60 } },
 
    { $set: { retirement: true } }
)
)


See findAndModify to modify and return a single document. By default, the returned document does not include the modifications made on the update.
Delete
db.collection.deleteOne()
d
db.collection.deleteMany()

db.users.deleteMany(
 
    { retirement: true }
)
)
 

