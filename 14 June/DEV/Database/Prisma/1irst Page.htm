<html><head><title>1irst Page</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</head>
<body bgcolor="#ffffff" leftmargin=5 topmargin=5 rightmargin=5 bottommargin=5>
<font size=2 color="#000000" face="Arial">
<div><table width="100%" border=0 cellpadding=15 cellspacing=6 bordercolor="#000000" bgcolor="#ffffff">
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font size=3 color="#008000"><b>Prisma ORM</b></font>&nbsp;is a database toolkit that simplifies database access in web applications. It allows developers to interact with databases using a type-safe and auto-generated API, making database operations easier and more secure.</div>
<ul type="disc">
<li>Prisma server: A standalone infrastructure component sitting on top of your database.</li>
<li>Prisma client: An auto-generated library that connects to the Prisma server and lets you read, write and stream data in your database. It is used for data access in your applications.</li>
</ul>
<div><br></div>
<div><br></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#008000"><b>1) npm install prisma</b></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#008000"><b>2) npm install @prisma/client</b></font></div>
<div><font color="#008000"><b><br></b></font></div>
<div><font color="#008000"><b>3) npx prisma init</b></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">configure the provider and the database url</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">incase you want to provide the data source</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><b>npx prisma init</b></font><font color="#000000" face="Consolas">&nbsp;--datasource-provider sqlite</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><b>.env file</b></font></div>
<div>DATABASE_URL="file:./employeeDB.sqlite"</div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><b>schema.prisma</b></font></div>
<div>generator client {</div>
<div>&nbsp; provider = "prisma-client-js"</div>
<div>}</div>
<div><br></div>
<div>datasource db {</div>
<div>&nbsp; provider = "sqlite"</div>
<div>&nbsp; url &nbsp; &nbsp; &nbsp;= env("DATABASE_URL")</div>
<div>}</div>
<div><br></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div>4) Create Model</div>
<div><br></div>
<div>&nbsp;model Employee {</div>
<div>&nbsp; id &nbsp; &nbsp; &nbsp; &nbsp;Int &nbsp; &nbsp; &nbsp;@id @default(autoincrement()) </div>
<div>&nbsp; id &nbsp; &nbsp; &nbsp; String &nbsp; @id @default(uuid())</div>
<div>&nbsp; name &nbsp; &nbsp; &nbsp;String</div>
<div>&nbsp; email &nbsp; &nbsp; String &nbsp; @unique</div>
<div>&nbsp; mobile &nbsp; &nbsp;String &nbsp; @unique</div>
<div>&nbsp; sport &nbsp; &nbsp; String</div>
<div>&nbsp; city &nbsp; &nbsp; &nbsp;String</div>
<div>&nbsp; isActive &nbsp;Boolean</div>
<div>}</div>
<div>&nbsp;</div>
<div>model User {</div>
<div>&nbsp; id &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String &nbsp; &nbsp; &nbsp; &nbsp; @id @default(cuid()) @map("_id")</div>
<div>&nbsp; username &nbsp; &nbsp; String</div>
<div>&nbsp; email &nbsp; &nbsp; &nbsp; &nbsp;String &nbsp; &nbsp; &nbsp; &nbsp; @unique</div>
<div>&nbsp; profilePic &nbsp; String</div>
<div>&nbsp; isAdmin &nbsp; &nbsp; &nbsp;Boolean &nbsp; &nbsp; &nbsp; &nbsp;@default(false)</div>
<div>&nbsp; isActive &nbsp; &nbsp; Boolean &nbsp; &nbsp; &nbsp; &nbsp;@default(true)</div>
<div>&nbsp; clerkUserId &nbsp;String &nbsp; &nbsp; &nbsp; &nbsp; @unique</div>
<div>&nbsp; createdAt &nbsp; &nbsp;DateTime &nbsp; &nbsp; &nbsp; @default(now())</div>
<div>&nbsp; updatedAt &nbsp; &nbsp;DateTime &nbsp; &nbsp; &nbsp; @updatedAt</div>
<div>&nbsp; &nbsp;</div>
<div>}</div>
<div><br></div>
<div><font color="#008000"><b>npm prisma db push</b></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#008000"><b>5) npx prisma migrate dev or npx prisma generate </b></font><font color="#000000">for mongodb</font></div>
<div><font color="#000000" face="Consolas">incase you want to provide the migration name</font></div>
<div><font color="#000000" face="Consolas"><b>npx prisma migrate dev</b></font><font color="#000000" face="Consolas">&nbsp;--name &lt;initialmigration&gt;</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#008000"><b>6) npx prisma studio</b></font></div>
<div><font color="#000000" face="Consolas"><b><br></b></font></div>
<div><font color="#000000" face="Consolas"><b>primsa studio is up and running on port </b></font><a href="http://localhost:5555"><font color="#0000ff" face="Consolas"><b><u>http://localhost:5555</u></b></font></a></div>
<div><font color="#000000" face="Consolas"><b><br></b></font></div>
<div><font color="#000000" face="Consolas"><b><br></b></font></div>
<div><font color="#008000"><b>7) create api routes</b></font></div>
<div><font color="#000000"><b><br></b></font></div>
<div>import { PrismaClient } from "@prisma/client";</div>
<div>import { NextRequest, NextResponse } from "next/server";</div>
<div>//create new item</div>
<div><br></div>
<div>const prisma = new PrismaClient();</div>
<div>export async function POST(request:NextRequest){</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; const {name,email,mobile} = await request.json();</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; await prisma.employee.create( { </div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data: {</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name: name,</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; email: email,</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mobile: mobile</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }); </div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; return NextResponse.json({msg: "Item created successfully"}, {status :201})</div>
<div>}</div>
<div>export async function GET(){</div>
<div>&nbsp; &nbsp; &nbsp;</div>
<div>&nbsp; &nbsp; const users = await prisma.employee.findMany(); </div>
<div>&nbsp; &nbsp; console.log(users);</div>
<div>&nbsp; &nbsp; return NextResponse.json({users});</div>
<div>}</div>
<div>//delete an item with provided id, http://localhost:3000/api/items?id=658b42c5c7ea15792d9b9f7f</div>
<div>export async function DELETE(request:NextRequest){</div>
<div>&nbsp; &nbsp; const id = request.nextUrl.searchParams.get('id');</div>
<div>&nbsp; &nbsp; await prisma.employee.delete({</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; where: {</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id: id ?? undefined</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; }</div>
<div>&nbsp; &nbsp; });</div>
<div>&nbsp; &nbsp; </div>
<div>&nbsp; &nbsp; return NextResponse.json({msg: `Item with id ${id} was deleted successfully`}, {status :404})</div>
<div>}</div>
<div><br></div>
<div><br></div>
<div><font color="#008000"><b>8) create api dynamic routes</b></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div>dbConfig.ts</div>
<div><br></div>
<div>import { PrismaClient } from '@prisma/client';</div>
<div><br></div>
<div>const prismaClientSingleton = () =&gt; {</div>
<div>&nbsp; return new PrismaClient();</div>
<div>};</div>
<div><br></div>
<div>type PrismaClientSingleton = ReturnType&lt;typeof prismaClientSingleton&gt;;</div>
<div><br></div>
<div>const globalForPrisma = globalThis as unknown as {</div>
<div>&nbsp; prisma: PrismaClientSingleton | undefined;</div>
<div>};</div>
<div><br></div>
<div>const prisma = globalForPrisma.prisma ?? prismaClientSingleton();</div>
<div><br></div>
<div>export default prisma;</div>
<div><br></div>
<div>if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;</div>
</font>
</td>
</tr>
<tr valign=top>
<td><br>
</td>
<td><br>
</td>
</tr>
<tr valign=top>
<td><br>
</td>
<td><br>
</td>
</tr>
<tr valign=top>
<td><br>
</td>
<td><br>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><a href="https://www.prisma.io/docs/concepts/components/prisma-client/crud"><font color="#0000ff" face="Consolas"><u>https://www.prisma.io/docs/concepts/components/prisma-client/crud</u></font></a></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">https://pris.ly/d/getting-started</font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><a href="https://www.traversymedia.com/blog/prisma-crash-course"><font color="#0000ff" face="Consolas"><u>https://www.traversymedia.com/blog/prisma-crash-course</u></font></a></div>
<div><font face="Consolas"><br></font></div>
<hr noshade size=1 color="#000000">
<div><font face="Consolas"><br></font></div>
<div><font face="Consolas">import { PrismaClient } from '@prisma/client';</font></div>
<div><font face="Consolas"><br></font></div>
<div><font face="Consolas">const prisma = new PrismaClient();</font></div>
<div><font face="Consolas"><br></font></div>
<div><font face="Consolas">async function main() {</font></div>
<div><font face="Consolas"><br></font></div>
<div><font face="Consolas">&nbsp; &nbsp; /* const user = await prisma.user.create({</font></div>
<div><font face="Consolas">&nbsp; &nbsp; &nbsp; &nbsp; data: {</font></div>
<div><font face="Consolas">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name: 'Wasan',</font></div>
<div><font face="Consolas">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; email:'wasan@gmail.com'</font></div>
<div><font face="Consolas">&nbsp; &nbsp; &nbsp; &nbsp; }</font></div>
<div><font face="Consolas">&nbsp; &nbsp; }); */</font></div>
<div><font face="Consolas"><br></font></div>
<div><font face="Consolas">&nbsp; &nbsp; const users = await prisma.user.findMany()</font></div>
<div><font face="Consolas">&nbsp; &nbsp; console.log(users)</font></div>
<div><font face="Consolas"><br></font></div>
<div><font face="Consolas">}</font></div>
<div><font face="Consolas"><br></font></div>
<div><font face="Consolas">main()</font></div>
<div><font face="Consolas">.then (async () =&gt;{</font></div>
<div><font face="Consolas">&nbsp; &nbsp; await prisma.$disconnect();</font></div>
<div><font face="Consolas">})</font></div>
<div><font face="Consolas">.catch (async (e) =&gt;{</font></div>
<div><font face="Consolas">&nbsp; &nbsp; console.error(e)</font></div>
<div><font face="Consolas">&nbsp; &nbsp; await prisma.$disconnect();</font></div>
<div><font face="Consolas">&nbsp; &nbsp; process.exit(1);</font></div>
<div><font face="Consolas">})</font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas">npm install typescript ts-node @types/node</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><b>npm install prisma</b></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">npm install @prisma/client</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">npx prisma init</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">incase you want to provide the data source</font></div>
<div><font color="#000000" face="Consolas"><b>npx prisma init</b></font><font color="#000000" face="Consolas">&nbsp;--datasource-provider sqlite</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">"file:./employeedb.db"</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><b>npx prisma migrate dev</b></font><font color="#000000" face="Consolas">&nbsp;--name &lt;initialmigration&gt;</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><b>npx prisma studio</b></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas">&nbsp;</font>generator client {</div>
<div>&nbsp; provider = "prisma-client-js"</div>
<div>}</div>
<div><br></div>
<div>datasource db {</div>
<div>&nbsp; provider = "sqlite"</div>
<div>&nbsp; url &nbsp; &nbsp; &nbsp;= env("DATABASE_URL")</div>
<div>}</div>
<div><br></div>
<div>DATABASE_URL="file:./taskDB.sqlite"<br><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas">const task = await prisma.task.create({</font></div>
<div><font color="#000000" face="Consolas">&nbsp; data: {</font></div>
<div><font color="#000000" face="Consolas">&nbsp; &nbsp; content: 'some task',</font></div>
<div><font color="#000000" face="Consolas">&nbsp; },</font></div>
<div><font color="#000000" face="Consolas">});</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">---------------------------------------------------------------</font></div>
<div><font color="#000000" face="Consolas">const tasks = await prisma.task.findMany();</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">-------------------------------------------------------------</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">// By unique identifier</font></div>
<div><font color="#000000" face="Consolas">const user = await prisma.user.findUnique({</font></div>
<div><font color="#000000" face="Consolas">&nbsp; where: {</font></div>
<div><font color="#000000" face="Consolas">&nbsp; &nbsp; email: 'elsa@prisma.io',</font></div>
<div><font color="#000000" face="Consolas">&nbsp; },</font></div>
<div><font color="#000000" face="Consolas">});</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">// By ID</font></div>
<div><font color="#000000" face="Consolas">const task = await prisma.task.findUnique({</font></div>
<div><font color="#000000" face="Consolas">&nbsp; where: {</font></div>
<div><font color="#000000" face="Consolas">&nbsp; &nbsp; id: id,</font></div>
<div><font color="#000000" face="Consolas">&nbsp; },</font></div>
<div><font color="#000000" face="Consolas">});</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">---------------------------------------------------------------------</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">const updateTask = await prisma.task.update({</font></div>
<div><font color="#000000" face="Consolas">&nbsp; where: {</font></div>
<div><font color="#000000" face="Consolas">&nbsp; &nbsp; id: id,</font></div>
<div><font color="#000000" face="Consolas">&nbsp; },</font></div>
<div><font color="#000000" face="Consolas">&nbsp; data: {</font></div>
<div><font color="#000000" face="Consolas">&nbsp; &nbsp; content: 'updated task',</font></div>
<div><font color="#000000" face="Consolas">&nbsp; },</font></div>
<div><font color="#000000" face="Consolas">});</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">--------------------------------------------------------------------</font></div>
<div><font color="#000000" face="Consolas">const deleteTask = await prisma.task.delete({</font></div>
<div><font color="#000000" face="Consolas">&nbsp; where: {</font></div>
<div><font color="#000000" face="Consolas">&nbsp; &nbsp; id: id,</font></div>
<div><font color="#000000" face="Consolas">&nbsp; },</font></div>
<div><font color="#000000" face="Consolas">});</font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div>model Task {</div>
<div>&nbsp; id String @id @default(uuid())</div>
<div>&nbsp; content String</div>
<div>&nbsp; createdAt DateTime @default(now())</div>
<div>&nbsp; completed Boolean @default(false)</div>
<div>}</div>
<div><br></div>
<div>model Employee {</div>
<div><br></div>
<div>id String @id @default(uuid())</div>
<div>email String @unique</div>
<div>name String<br>mobile String</div>
<div>createdAt DateTime @default(now())</div>
<div>updatedAt DateTime @updatedAt</div>
<div>}</div>
<div><br></div>
<div><br></div>
<div>model Employee {</div>
<div>&nbsp; id &nbsp; &nbsp; &nbsp; &nbsp;Int &nbsp; &nbsp; &nbsp;@id @default(autoincrement())</div>
<div>&nbsp; name &nbsp; &nbsp; &nbsp;String</div>
<div>&nbsp; email &nbsp; &nbsp; String &nbsp; @unique</div>
<div>&nbsp; mobileNo &nbsp;String &nbsp; @unique</div>
<div>&nbsp; createdAt DateTime @default(now())</div>
<div>&nbsp; updatedAt DateTime @updatedAt</div>
<div>}</div>
<div><br></div>
<div><br></div>
<div><br></div>
<div>}</div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div>import { PrismaClient } from '@prisma/client'; </div>
<div><br></div>
<div>const prisma = new PrismaClient();</div>
<div><br></div>
<div>const user = await prisma.user.create({ data: { name: 'John Doe', email: 'john@gmail.com', }, }); </div>
<div>console.log(user);</div>
<div><br></div>
<div>const users = await prisma.user.findMany(); </div>
<div>console.log(users);</div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div>Prisma ORM is a database toolkit that simplifies database access in web applications. It allows developers to interact with databases using a type-safe and auto-generated API, making database operations easier and more secure.</div>
<ul type="disc">
<li>Prisma server: A standalone infrastructure component sitting on top of your database.</li>
<li>Prisma client: An auto-generated library that connects to the Prisma server and lets you read, write and stream data in your database. It is used for data access in your applications.</li>
</ul>
<div><br></div>
<div><br></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#008000"><b>1) npm install prisma</b></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#008000"><b>2) npm install @prisma/client</b></font></div>
<div><font color="#008000"><b><br></b></font></div>
<div><font color="#008000"><b>3) npx prisma init</b></font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">configure the provider and the database url</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#000000" face="Consolas">incase you want to provide the data source</font></div>
<div><font color="#000000" face="Consolas"><b>npx prisma init</b></font><font color="#000000" face="Consolas">&nbsp;--datasource-provider sqlite</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div>4) model Employee {</div>
<div>&nbsp; id &nbsp; &nbsp; &nbsp; &nbsp;Int &nbsp; &nbsp; &nbsp;@id @default(autoincrement())</div>
<div>&nbsp; name &nbsp; &nbsp; &nbsp;String</div>
<div>&nbsp; email &nbsp; &nbsp; String &nbsp; @unique</div>
<div>&nbsp; mobileNo &nbsp;String &nbsp; @unique</div>
<div>&nbsp; createdAt DateTime @default(now())</div>
<div>&nbsp; updatedAt DateTime @updatedAt</div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#008000"><b>5) npx prisma migrate</b></font></div>
<div><font color="#000000" face="Consolas">incase you want to provide the migration name</font></div>
<div><font color="#000000" face="Consolas"><b>npx prisma migrate dev</b></font><font color="#000000" face="Consolas">&nbsp;--name &lt;initialmigration&gt;</font></div>
<div><font color="#000000" face="Consolas"><br></font></div>
<div><font color="#008000"><b>6) npx prisma studio</b></font></div>
<div><font color="#000000" face="Consolas"><b><br></b></font></div>
<div><font color="#000000" face="Consolas"><b>primsa studio is up and running on port </b></font><a href="http://localhost:5555"><font color="#0000ff" face="Consolas"><b><u>http://localhost:5555</u></b></font></a></div>
<div><font color="#000000" face="Consolas"><b><br></b></font></div>
<div><font color="#000000" face="Consolas"><b><br></b></font></div>
<div><font color="#008000"><b>7) create api routes</b></font></div>
<div><font color="#000000"><b><br></b></font></div>
<div>import { PrismaClient } from "@prisma/client";</div>
<div>import { NextRequest, NextResponse } from "next/server";</div>
<div>//create new item</div>
<div><br></div>
<div>const prisma = new PrismaClient();</div>
<div>export async function POST(request:NextRequest){</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; const {name,email,mobile} = await request.json();</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; await prisma.employee.create( { </div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data: {</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name: name,</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; email: email,</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mobile: mobile</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }); </div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; return NextResponse.json({msg: "Item created successfully"}, {status :201})</div>
<div>}</div>
<div>export async function GET(){</div>
<div>&nbsp; &nbsp; &nbsp;</div>
<div>&nbsp; &nbsp; const users = await prisma.employee.findMany(); </div>
<div>&nbsp; &nbsp; console.log(users);</div>
<div>&nbsp; &nbsp; return NextResponse.json({users});</div>
<div>}</div>
<div>//delete an item with provided id, http://localhost:3000/api/items?id=658b42c5c7ea15792d9b9f7f</div>
<div>export async function DELETE(request:NextRequest){</div>
<div>&nbsp; &nbsp; const id = request.nextUrl.searchParams.get('id');</div>
<div>&nbsp; &nbsp; await prisma.employee.delete({</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; where: {</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id: id ?? undefined</div>
<div>&nbsp; &nbsp; &nbsp; &nbsp; }</div>
<div>&nbsp; &nbsp; });</div>
<div>&nbsp; &nbsp; </div>
<div>&nbsp; &nbsp; return NextResponse.json({msg: `Item with id ${id} was deleted successfully`}, {status :404})</div>
<div>}</div>
<div><br></div>
<div><br></div>
<div><font color="#008000"><b>8) create api dynamic routes</b></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
<tr valign=top>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
<td><font size=2 color="#000000" face="Arial">
<div><font color="#000000" face="Consolas"><br></font></div>
</font>
</td>
</tr>
</table>
</div>
</font>
</body></html>
